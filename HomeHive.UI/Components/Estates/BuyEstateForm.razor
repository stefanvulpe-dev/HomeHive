@using HomeHive.UI.ViewModels.Estates
@using HomeHive.UI.Utils
@using HomeHive.UI.Interfaces
@using HomeHive.UI.ViewModels
@using HomeHive.Domain.Common.EntitiesUtils.Estates
@using HomeHive.Domain.Entities
@inject ILogger<BuyEstateForm> Logger
@inject IContractDataService ContractDataService
@inject IAuthService AuthService

<div class="card m-3">
    <div class="row card-body justify-content-center text-center">
        @if(Estate?.EstateCategory == "ForRent")
        {
            <h3 class="fw-bold mb-4">Rent your dream <span class="fst-italic">nest</span> now.</h3>
        }
        else
        {
            <h3 class="fw-bold mb-4">Buy your dream <span class="fst-italic">nest</span> now.</h3>
        }
        <div class="col-6 justify-content-center">
            <EditForm Model="@BuyModel" OnValidSubmit="@HandleValidSubmit" FormName="buyForm">
                <DataAnnotationsValidator/>
                <CustomValidation @ref="@_customValidation"/>

                <div class="d-flex flex-row flex-wrap justify-content-start form-outline mb-3">
                    <label class="form-label" for="buy-price">Your Price <strong>$</strong></label>
                    <InputNumber min="@Estate?.Price" id="buy-price" class="form-control" @bind-Value="@BuyModel.Price"/>
                    <ValidationMessage For="@(() => BuyModel.Price)"/>
                </div>

                <div class="d-flex flex-row flex-wrap justify-content-start form-outline mb-3">
                    <label class="form-label" for="buy-price">Start date</label>
                    <InputDate min="@DateTime.Today.ToString("yyyy-MM-dd")" id="start-date" class="form-control" @bind-Value="@BuyModel.StartDate"/>
                    <ValidationMessage For="@(() => BuyModel.StartDate)"/>
                </div>

                @if (Estate?.EstateCategory == "ForRent")
                {
                    <div class="d-flex flex-row flex-wrap justify-content-start form-outline mb-3">
                        <label class="form-label" for="buy-price">End date</label>
                        <InputDate min="@DateTime.Today.ToString("yyyy-MM-dd")" id="end-date" class="form-control" @bind-Value="@BuyModel.EndDate"/>
                        <ValidationMessage For="@(() => BuyModel.EndDate)"/>
                    </div>
                }

                <div class="d-flex flex-row flex-wrap justify-content-start form-outline mb-3">
                    <label class="form-label" for="buy-description">Tell something to the owner</label>
                    <InputTextArea id="buy-description" class="form-control" @bind-Value="@BuyModel.Description"/>
                    <ValidationMessage For="@(() => BuyModel.Description)"/>
                </div>

                @if (_owner)
                {
                    <div class="alert alert-danger">
                        <strong>Warning!</strong> You are the owner of this estate.
                    </div>
                }
                else
                {
                    <div class="d-flex justify-content-center my-4">
                        <button type="submit" class="btn btn-primary btn-lg" disabled="@_isSubmitting">
                            Make Offer
                        </button>
                    </div>
                    @if (_success)
                    {
                        <div class="alert alert-success">
                            <strong>Success!</strong> Your offer has been submitted.
                        </div>
                    }
                }
            </EditForm>
        </div>
    </div>
</div>


@code {
    [Parameter] public EstateViewModel? Estate { get; set; }

    [SupplyParameterFromForm] private ContractViewModel? BuyModel { get; set; }

    private CustomValidation? _customValidation;

    private bool _owner;

    private bool _isSubmitting;
    
    private bool _success;
    
    protected override void OnInitialized()
    {
        BuyModel ??= new ContractViewModel
        {
            EstateId = Estate?.Id,
            ContractType = GetContractType(Estate?.EstateCategory)
        };
        Console.WriteLine("ContractType: " + BuyModel.ContractType);
    }
    
    private string? GetContractType(string estateCategory)
    {
        return estateCategory switch
        {
            "ForSale" => "Sale",
            "ForRent" => "Rent",
            _ => null
            };
    }

    protected override async Task OnInitializedAsync()
    {
        var userId = await AuthService.GetUserId();
        _owner = userId == Estate?.OwnerId;
    }

    private async void HandleValidSubmit()
    {
        _customValidation?.ClearErrors();
        try
        {
            _isSubmitting = true;
            
            var result = await ContractDataService.Add(BuyModel);

            if (result is { IsSuccess: true })
            {
                Logger.LogInformation("Buy form submitted successfully");
                _success = true;
                StateHasChanged();
            }
            else
            {
                Logger.LogError($"Error while submitting buy form: {result!.Message}");
                if (result.ValidationsErrors is not null)
                {
                    _customValidation?.DisplayErrors(result.ValidationsErrors);
                }
                _success = false;
            }
        }
        catch (Exception e)
        {
            Logger.LogError(e, "Error while submitting buy form");
        }
        finally
        {
            _isSubmitting = false;
            StateHasChanged();
        }
    }

}