@inject IJSRuntime JsRuntime

@if (EstatePhotos?.Count == 0)
{
    <div class="alert alert-warning" role="alert">
        No photos available
    </div>
}
else
{
    <div id="@CarouselName" class="carousel slide" data-bs-ride="carousel" data-bs-wrap="true" data-bs-interval="20000" data-bs-pause="false">
        <div class="carousel-indicators">
            <button type="button" data-bs-target="#carouselExampleIndicators" data-bs-slide-to="0" class="active" aria-current="true" aria-label="Slide 1"></button>
            <button type="button" data-bs-target="#carouselExampleIndicators" data-bs-slide-to="1" aria-label="Slide 2"></button>
            <button type="button" data-bs-target="#carouselExampleIndicators" data-bs-slide-to="2" aria-label="Slide 3"></button>
        </div>
        <div class="carousel-inner">
            @foreach(var item in _carouselItems)
            {
                <div class="carousel-item @(item == _carouselItems[0] ? "active" : "")">
                    <img src="@item" class="d-block w-100 rounded" alt="estate-image" height="600px">
                </div>
            }
        </div>
        <button class="carousel-control-prev" type="button" data-bs-target="#carouselExampleIndicators" data-bs-slide="prev">
            <span class="carousel-control-prev-icon" aria-hidden="true"></span>
            <span class="visually-hidden">Previous</span>
        </button>
        <button class="carousel-control-next" type="button" data-bs-target="#carouselExampleIndicators" data-bs-slide="next">
            <span class="carousel-control-next-icon" aria-hidden="true"></span>
            <span class="visually-hidden">Next</span>
        </button>
    </div> 
}

@code {
    
    [Parameter] public IReadOnlyList<byte[]>? EstatePhotos { get; set; }

    private readonly List<string> _carouselItems = new();
    
	const string CarouselName = "carouselExampleIndicators"; 

	protected override async Task OnAfterRenderAsync(bool firstRender)
	{
		object[] args = { CarouselName };
		await JsRuntime.InvokeVoidAsync("startCarousel", args); 
	}

    protected override async Task OnInitializedAsync()
    {
        foreach (var bytePhoto in EstatePhotos!)
        {
            var base64 = Convert.ToBase64String(bytePhoto);
            var imgSrc = $"data:image/gif;base64,{base64}";
            _carouselItems.Add(imgSrc);
        }
        await base.OnInitializedAsync();
    }

}