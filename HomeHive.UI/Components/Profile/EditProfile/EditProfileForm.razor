@using HomeHive.UI.ViewModels.Users
@using HomeHive.UI.Utils
@using HomeHive.UI.Interfaces
@inject IUserDataService UserDataService
@inject ILogger<EditProfileForm> Logger

<EditForm Model="@User" OnValidSubmit="@HandleValidSubmit" FormName="editProfileForm">
    <DataAnnotationsValidator/>
    <CustomValidation @ref="@_customValidation"/>
    
    <div class="row mb-3">
            <label for="firstName" class="form-label">First Name</label>
            <InputText class="form-control" id="firstName" @bind-Value="@User!.FirstName"/>
            <label for="lastName" class="form-label">Last Name</label>
            <InputText class="form-control" id="lastName" @bind-Value="@User.LastName"/>
    </div>

    <div class="d-flex justify-content-center">
        <button type="submit" class="btn btn-primary mb-3" disabled="@_isSubmitting">Change your info</button>
    </div>
    
    @if (_isSuccess)
    {
        <div class="alert alert-success" role="alert">
            Profile updated successfully!
        </div>
    }
</EditForm>

@code {
    [SupplyParameterFromForm] private UserModel? User { get; set; }

    private CustomValidation? _customValidation;

    private bool _isSubmitting;

    private bool _isSuccess;

    protected override async void OnInitialized()
    {
        User ??= new UserModel();
        
        var result = await UserDataService.GetUserInfo();
        
        if (result is { IsSuccess:true })
        {
            User.FirstName = result.User!.FirstName;
            User.LastName = result.User.LastName;
            StateHasChanged();
        }
        else
        {
            Logger.LogError(result!.Message);
        }
        
    }

    private async void HandleValidSubmit()
    {
        _customValidation?.ClearErrors();
        try
        {
            _isSubmitting = true;
            var result = await UserDataService.UpdateGeneralInfo(User!);

            if (result != null)
            {
                if (result.IsSuccess)
                {
                    _isSuccess = true;
                    StateHasChanged();
                    Logger.LogInformation(result.Message);
                }
                else
                {
                    Logger.LogError(result.Message);
                    if (result.ValidationsErrors != null)
                        _customValidation?.DisplayErrors(result.ValidationsErrors);
                }
            }
        }
        catch (Exception)
        {
            Logger.LogError("An error occurred while registering");
        }
        finally
        {
            _isSubmitting = false;
        }
    }

}