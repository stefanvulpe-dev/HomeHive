@using HomeHive.UI.ViewModels.Estates
@using HomeHive.UI.Utils
@using HomeHive.UI.Components.Authentication
@using HomeHive.UI.Interfaces
@using HomeHive.Domain.Common.EntitiesUtils.Estates
@using HomeHive.Domain.Common.EntitiesUtils.Rooms
@using HomeHive.Domain.Common.EntitiesUtils.Utility
@using ContentDispositionHeaderValue = System.Net.Http.Headers.ContentDispositionHeaderValue
@using MediaTypeHeaderValue = System.Net.Http.Headers.MediaTypeHeaderValue
@using System.Text.Json.Serialization
@using System.Text.Json
@inject NavigationManager NavigationManager
@inject ILogger<LoginForm> Logger
@inject IEstateDataService EstateService

<p class="fs-3">Add new Estate</p>
<hr/>
<EditForm Model="@EstateModel" OnValidSubmit="@HandleValidSubmit" FormName="addEstateForm">
    <DataAnnotationsValidator/>
    <CustomValidation @ref="@_customValidation"/>
    <div class="image-container mb-3">
        <img src="@_imgSrc" alt="avatar image rounded"/>
        <small>This is the first image the clients we'll see when searching for this estate.</small>
        <InputFile class="form-control" id="estateAvatar" OnChange="@OnInputFileChange" accept=".jpg,.jpeg,.png"/>
        <ValidationMessage For="@(() => EstateModel!.EstateAvatar)"></ValidationMessage>
    </div>
    <hr/>
    <div class="row">
        <div class="col-md-6">
            <div class="mb-3">
                <label for="estateType" class="form-label">Estate Type</label>
                <InputSelect class="form-control" id="estateType" @bind-Value="EstateModel!.EstateType">
                    @foreach (var type in Enum.GetValues<EstateType>())
                    {
                        <option value="@type">@type</option>
                    }
                </InputSelect>
                <ValidationMessage For="@(() => EstateModel.EstateType)"></ValidationMessage>
            </div>
            <div class="mb-3">
                <label for="estateCategory" class="form-label">Estate Category</label>
                <InputSelect class="form-control" id="estateCategory" @bind-Value="EstateModel.EstateCategory">
                    @foreach (var category in Enum.GetValues<EstateCategory>())
                    {
                        <option value="@category">@category</option>
                    }
                </InputSelect>
                <ValidationMessage For="@(() => EstateModel.EstateCategory)"></ValidationMessage>
            </div>
            <div class="mb-3">
                <label for="name" class="form-label">Name</label>
                <InputText class="form-control" id="name" @bind-Value="EstateModel.Name"/>
                <ValidationMessage For="@(() => EstateModel.Name)"></ValidationMessage>
            </div>
            <div class="mb-3">
                <label class="form-label">Location</label>
                <div class="d-flex">
                    <InputSelect class="form-control me-2" id="country" @bind-Value="@EstateModel.Country">
                        <option value="" disabled selected>Select a country</option>
                        @foreach (var country in _countries)
                        {
                            <option value="@country">@country</option>
                        }
                    </InputSelect>
                    <InputSelect class="form-control" id="city" @bind-Value="@EstateModel.City">
                        <option value="" disabled selected>Select a city</option>
                        @if (!string.IsNullOrEmpty(EstateModel.Country))
                        {
                            foreach (var city in _allCities[EstateModel.Country])
                            {
                                <option value="@city">@city</option>
                            }
                        }
                    </InputSelect>
                </div>
                <ValidationMessage For="@(() => EstateModel.Location)"></ValidationMessage>
            </div>
            <div class="mb-3">
                <label for="price" class="form-label">
                    @if (EstateModel.EstateCategory == EstateCategory.ForRent.ToString())
                    {
                        <text>Price ($/month)</text>
                    }
                    else
                    {
                        <text>Price</text>
                    }
                </label>
                <InputNumber class="form-control" id="price" min="0" max="1_000_000d" @bind-Value="@EstateModel.Price"/>
                <ValidationMessage For="@(() => EstateModel.Price)"></ValidationMessage>
            </div>
            <div class="mb-3">
                <label for="totalArea" class="form-label">Total Area (Square Meters)</label>
                <InputNumber class="form-control" id="totalArea" min="0" max="1_000_000d" @bind-Value="@EstateModel.TotalAreaInt"/>
                <ValidationMessage For="@(() => EstateModel.TotalArea)"></ValidationMessage>
            </div>
        </div>
        <div class="col-md-6">
            <div class="mb-3">
                <label for="utilities" class="form-label">Utilities</label>
                <InputSelect class="form-control" id="utilities" @bind-Value="@EstateModel.EstateUtilities" multiple="">
                    @foreach (var utility in Enum.GetValues<UtilityType>())
                    {
                        <option value="@utility">@utility</option>
                    }
                </InputSelect>
                <ValidationMessage For="@(() => EstateModel.Utilities)"></ValidationMessage>
            </div>
            <div class="mb-3">
                <label for="rooms" class="form-label">Rooms</label>
                <InputSelect class="form-control" id="rooms" @bind-Value="@EstateModel.EstateRoomsKeys" multiple="">
                    @foreach (var room in Enum.GetValues<RoomType>())
                    {
                        <option value="@room">@room</option>
                    }
                </InputSelect>
                <ValidationMessage For="@(() => EstateModel.EstateRoomsKeys)"></ValidationMessage>
                <ValidationMessage For="@(() => EstateModel.Rooms)"></ValidationMessage>

                @foreach (var selectedOption in EstateModel.EstateRoomsKeys)
                {
                    <div class="w-100 mt-2 d-flex justify-content-between align-items-center bg-white p-2 rounded">
                        <span>@selectedOption</span>
                        <div class="d-flex justify-content-center align-items-center gap-2">
                            <span>@EstateModel.Rooms![selectedOption]</span>
                            <button type="button" class="btn-primary align-self-stretch px-2" @onclick="() => IncreaseQuantity(selectedOption)">+</button>
                            <button type="button" class="btn-primary align-self-stretch px-2" @onclick="() => DecreaseQuantity(selectedOption)">-</button>
                        </div>
                    </div>
                }
            </div>
            <div class="mb-3">
                <label for="description" class="form-label">Description</label>
                <InputText class="form-control" id="description" @bind-Value="EstateModel.Description"/>
                <ValidationMessage For="@(() => EstateModel.Description)"></ValidationMessage>
            </div>
        </div>
        <div class="d-flex justify-content-center">
            <button type="submit" class="btn btn-primary" disabled="@_isSubmitting">Add Estate</button>
        </div>
    </div>
</EditForm>

@code {
    [SupplyParameterFromForm] private CreateEstateModel? EstateModel { get; set; }

    private CustomValidation? _customValidation;

    private bool _isSubmitting;

    private string _imgSrc = "background1.jpg";

    private string[] _countries = Array.Empty<string>();
    
    private Dictionary<string, string[]> _allCities = new Dictionary<string, string[]>();

    protected override void OnInitialized()
    {
        EstateModel ??= new CreateEstateModel();
        EstateModel.EstateCategory ??= EstateCategory.ForRent.ToString();
        EstateModel.EstateType ??= EstateType.House.ToString();
        EstateModel.Rooms = Enum.GetValues<RoomType>().ToDictionary(x => x.ToString(), x => 0);
        _countries = GetPredefinedCountries();
        _allCities = GetPredefinedCities();
    }

    private async void HandleValidSubmit()
    {
        _customValidation?.ClearErrors();
        try
        {
            _isSubmitting = true;
            
            var content = new MultipartFormDataContent();

            const int maxFileSize = 1024 * 1024 * 2; // 2 MB
            var fileContent = new StreamContent(EstateModel!.EstateAvatar?.OpenReadStream(maxAllowedSize: maxFileSize)!);

            fileContent.Headers.ContentDisposition = new ContentDispositionHeaderValue("form-data")
            {
                Name = "estateAvatar",
                FileName = EstateModel!.EstateAvatar!.Name
            };
            fileContent.Headers.ContentType = new MediaTypeHeaderValue(EstateModel.EstateAvatar.ContentType);

            EstateModel.Rooms = EstateModel.Rooms!.Where(x => x.Value > 0).ToDictionary(x => x.Key, x => x.Value);

            content.Add(fileContent);
            content.Add(new StringContent(EstateModel.EstateType!), "estateType");
            content.Add(new StringContent(EstateModel.EstateCategory!), "estateCategory");
            content.Add(new StringContent(EstateModel.Name!), "name");
            content.Add(new StringContent(EstateModel.Location!), "location");
            content.Add(new StringContent(EstateModel.Price.ToString()!), "price");
            content.Add(new StringContent(EstateModel.TotalArea!), "totalArea");
            content.Add(new StringContent(JsonSerializer.Serialize(EstateModel.Utilities)), "utilities");
            content.Add(new StringContent(JsonSerializer.Serialize(EstateModel.Rooms)), "rooms");
            content.Add(new StringContent(EstateModel.Description!), "description");

            var result = await EstateService.Add(content);

            if (result != null)
            {
                if (result.IsSuccess)
                {
                    Logger.LogInformation(result.Message);
                    NavigationManager.NavigateTo("/listed-estates");
                }
                else
                {
                    Logger.LogError(result.Message);
                    if (result.ValidationsErrors != null)
                        _customValidation?.DisplayErrors(result.ValidationsErrors);
                }
            }
        }
        catch (Exception)
        {
            Logger.LogError("An error occurred while registering a new estate");
        }
        finally
        {
            _isSubmitting = false;
            StateHasChanged();
        }
    }

    private void IncreaseQuantity(string option)
    {
        EstateModel!.Rooms![option]++;
    }

    private void DecreaseQuantity(string option)
    {
        if (EstateModel?.Rooms![option] > 0)
        {
            EstateModel.Rooms![option]--;
        }
    }

    private void OnInputFileChange(InputFileChangeEventArgs obj)
    {
        _customValidation?.ClearErrors();
        const int maxAllowedSize = 2 * 1024 * 1024; // 2MB
        if (obj.File.Size > maxAllowedSize)
        {
            _customValidation?.DisplayErrors(new Dictionary<string, string>
            {
                { "EstateAvatar", "File size exceeds 2MB limit" }
            });
            EstateModel!.EstateAvatar = null;
            return;
        }

        EstateModel!.EstateAvatar = obj.File;
        ShowImagePreview(EstateModel.EstateAvatar!);
    }

    private async void ShowImagePreview(IBrowserFile file)
    {
        var format = file.ContentType.Contains("png") ? "png" : "jpeg";
        var resizedImageFile = await file.RequestImageFileAsync(format, 600, 600);
        var buffer = new byte[resizedImageFile.Size];
        const int maxAllowedSize = 2 * 1024 * 1024; // 2MB
        var readAsync = await resizedImageFile.OpenReadStream(maxAllowedSize: maxAllowedSize).ReadAsync(buffer);
        var imageBase64 = Convert.ToBase64String(buffer);
        _imgSrc = $"data:{file.ContentType};base64,{imageBase64}";
        StateHasChanged();
    }

    private string[] GetPredefinedCountries()
    {
        return new string[]
        {
            "Romania", "United States", "Germany", "France", "Japan",
            "Italy", "Spain", "Canada", "United Kingdom", "Australia"
        };
    }

    private Dictionary<string, string[]> GetPredefinedCities()
    {
        return new Dictionary<string, string[]>
        {
            { "Romania", new string[] { "Bucharest", "Cluj-Napoca", "Timisoara", "Iasi", "Constanta" } },
            { "United States", new string[] { "New York", "Los Angeles", "Chicago", "Miami", "San Francisco" } },
            { "Germany", new string[] { "Berlin", "Munich", "Hamburg", "Frankfurt", "Cologne" } },
            { "France", new string[] { "Paris", "Marseille", "Lyon", "Toulouse", "Nice" } },
            { "Japan", new string[] { "Tokyo", "Osaka", "Kyoto", "Yokohama", "Sapporo" } },
            { "Italy", new string[] { "Rome", "Milan", "Naples", "Turin", "Florence" } },
            { "Spain", new string[] { "Madrid", "Barcelona", "Valencia", "Seville", "Zaragoza" } },
            { "Canada", new string[] { "Toronto", "Vancouver", "Montreal", "Calgary", "Ottawa" } },
            { "United Kingdom", new string[] { "London", "Manchester", "Birmingham", "Glasgow", "Edinburgh" } },
            { "Australia", new string[] { "Sydney", "Melbourne", "Brisbane", "Perth", "Adelaide" } }
        };
    }
}