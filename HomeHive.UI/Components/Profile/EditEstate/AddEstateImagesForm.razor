@using HomeHive.UI.ViewModels.Estates
@using HomeHive.UI.Utils
@using HomeHive.UI.Components.Authentication
@using HomeHive.UI.Interfaces
@using HomeHive.Domain.Common.EntitiesUtils.Rooms
@using ContentDispositionHeaderValue = System.Net.Http.Headers.ContentDispositionHeaderValue
@using MediaTypeHeaderValue = System.Net.Http.Headers.MediaTypeHeaderValue
@inject ILogger<LoginForm> Logger
@inject IEstateDataService EstateService


<EditForm Model="@EstateModel" OnValidSubmit="@HandleValidSubmit" FormName="addEstateImagesForm">
    <DataAnnotationsValidator/>
    <CustomValidation @ref="@_customValidation"/>
    <div class="image-container mb-3">
        <InputFile class="form-control" id="estateAvatar" OnChange="@OnInputFileChange" accept=".jpg,.jpeg,.png" multiple/>
        <ValidationMessage For="@(() => EstateModel!.EstateAvatar)"></ValidationMessage>
    </div>
    <div class="d-flex justify-content-center">
        <button type="submit" class="btn btn-primary" disabled="@_isSubmitting">Upload Images</button>
    </div>
    <hr/>
</EditForm>


@code {
    [SupplyParameterFromForm] private CreateEstateModel? EstateModel { get; set; }

    private CustomValidation? _customValidation;
    
    private bool _isSubmitting;
    
    private string _imgSrc = "background1.jpg";
    
    protected override void OnInitialized()
    {
        EstateModel ??= new CreateEstateModel();
    }

    private async void HandleValidSubmit()
    {
        _customValidation?.ClearErrors();
        try
        {
            _isSubmitting = true;
            
            var content = new MultipartFormDataContent();
        
            const int maxFileSize = 1024 * 1024 * 2; // 2 MB
            
            var fileContent = new StreamContent(EstateModel!.EstateAvatar?.OpenReadStream(maxAllowedSize: maxFileSize)!);

            fileContent.Headers.ContentDisposition = new ContentDispositionHeaderValue("form-data")
            {
                Name = "estateAvatar",
                FileName = EstateModel!.EstateAvatar!.Name
            };
            fileContent.Headers.ContentType = new MediaTypeHeaderValue(EstateModel.EstateAvatar.ContentType);
            
            EstateModel.Rooms = EstateModel.Rooms!.Where(x => x.Value > 0).ToDictionary(x => x.Key, x => x.Value);
            
            content.Add(fileContent);
            
            var result = await EstateService.Add(content);

            if (result != null)
            {
                if (result.IsSuccess)
                {
                    Logger.LogInformation(result.Message);
                }
                else
                {
                    Logger.LogError(result.Message);
                    if (result.ValidationsErrors != null)
                        _customValidation?.DisplayErrors(result.ValidationsErrors);
                }
            }
        }
        catch (Exception)
        {
            Logger.LogError("An error occurred while updating the avatar.");
        }
        finally
        {
            _isSubmitting = false;
        }
    }
    

    private void OnInputFileChange(InputFileChangeEventArgs obj)
    {
        _customValidation?.ClearErrors();
        const int maxAllowedSize = 2 * 1024 * 1024; // 2MB
        if (obj.File.Size > maxAllowedSize)
        {
            _customValidation?.DisplayErrors(new Dictionary<string, string>
            {
                { "EstateAvatar", "File size exceeds 2MB limit" }
            });
            EstateModel!.EstateAvatar = null;
            return;
        }
        EstateModel!.EstateAvatar = obj.File;
        ShowImagePreview(EstateModel.EstateAvatar!);
    }

    private async void ShowImagePreview(IBrowserFile file)
    {
        var format = file.ContentType.Contains("png") ? "png" : "jpeg";
        var resizedImageFile = await file.RequestImageFileAsync(format, 600, 600);
        var buffer = new byte[resizedImageFile.Size];
        const int maxAllowedSize = 2 * 1024 * 1024; // 2MB
        var readAsync = await resizedImageFile.OpenReadStream(maxAllowedSize: maxAllowedSize).ReadAsync(buffer);
        var imageBase64 = Convert.ToBase64String(buffer);
        _imgSrc = $"data:{file.ContentType};base64,{imageBase64}";
        StateHasChanged();
    }
}