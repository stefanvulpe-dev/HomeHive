@using HomeHive.UI.ViewModels.Estates
@using HomeHive.UI.Utils
@using HomeHive.UI.Components.Authentication
@using HomeHive.UI.Interfaces
@using HomeHive.Domain.Common.EntitiesUtils.Estates
@using HomeHive.Domain.Common.EntitiesUtils.Rooms
@inject NavigationManager NavigationManager
@inject ILogger<LoginForm> Logger
@inject IEstateDataService EstateService


<p class="fs-3">Edit Estate</p>
<hr/>

<EditForm Model="@EstateModel" OnValidSubmit="@HandleValidSubmit" FormName="editEstateForm">
    <DataAnnotationsValidator/>
    <CustomValidation @ref="@_customValidation"/>
    @* <div class="image-container mb-3"> *@
    @*     <img src="background1.jpg" alt="avatar image"/> *@
    @*     <small>This is the first image the clients we'll see when searching for this estate.</small> *@
    @*     <InputFile class="form-control"/> *@
    @* </div> *@
    @* <hr/> *@
    <div class="row">
        <div class="col-md-6">
            <div class="mb-3">
                <label for="estateType" class="form-label">Estate Type</label>
                <InputSelect class="form-control" id="estateType" @bind-Value="EstateModel!.EstateType">
                    @foreach (var type in Enum.GetValues<EstateType>())
                    {
                        <option value="@type">@type</option>
                    }
                </InputSelect>
                <ValidationMessage For="@(() => EstateModel.EstateType)"></ValidationMessage>
            </div>
            <div class="mb-3">
                <label for="estateCategory" class="form-label">Estate Category</label>
                <InputSelect class="form-control" id="estateCategory" @bind-Value="EstateModel.EstateCategory">
                    @foreach (var category in Enum.GetValues<EstateCategory>())
                    {
                        <option value="@category">@category</option>
                    }
                </InputSelect>
                <ValidationMessage For="@(() => EstateModel.EstateCategory)"></ValidationMessage>
            </div>
            <div class="mb-3">
                <label for="name" class="form-label">Name</label>
                <InputText class="form-control" id="name" @bind-Value="EstateModel.Name"/>
                <ValidationMessage For="@(() => EstateModel.Name)"></ValidationMessage>
            </div>
            <div class="mb-3">
                <label for="location" class="form-label">Location</label>
                <InputText class="form-control" id="location" @bind-Value="EstateModel.Location"/>
                <ValidationMessage For="@(() => EstateModel.Location)"></ValidationMessage>
            </div>
            <div class="mb-3">
                <label for="price" class="form-label">Price</label>
                <InputText class="form-control" id="price" @bind-Value="@_priceString"/>
                <ValidationMessage For="@(() => EstateModel.Price)"></ValidationMessage>
            </div>

        </div>
        <div class="col-md-6">
            <div class="mb-3">
                <label for="totalArea" class="form-label">Total Area</label>
                <InputText class="form-control" id="totalArea" @bind-Value="EstateModel.TotalArea"/>
                <ValidationMessage For="@(() => EstateModel.TotalArea)"></ValidationMessage>
            </div>
            <div class="mb-3">
                <label for="utilities" class="form-label">Utilities</label>
                <InputSelect class="form-control" id="utilities" @bind-Value="@_selectedUtilities" multiple="">
                    @foreach (var type in EstateModel.Utilities!)
                    {
                        <option value="@type">@type</option>
                    }
                </InputSelect>
            </div>
            <div class="mb-3">
                <label for="rooms" class="form-label">Rooms</label>
                <InputSelect class="form-control" id="rooms" @bind-Value="@_selectedRooms" multiple="">
                    @foreach (var type in Enum.GetValues<RoomType>())
                    {
                        <option value="@type">@type</option>
                    }
                </InputSelect>

                @foreach (var selectedOption in _selectedRooms)
                {
                    <div class="w-100 mt-2 d-flex justify-content-between align-items-center bg-white p-2 rounded">
                        <span>@selectedOption</span>
                        <div class="d-flex justify-content-center align-items-center gap-2">
                            <span>@_quantities[selectedOption]</span>
                            <button class="btn-primary align-self-stretch px-2" @onclick="() => IncreaseQuantity(selectedOption)">+</button>
                            <button class="btn-primary align-self-stretch px-2" @onclick="() => DecreaseQuantity(selectedOption)">-</button>
                        </div>
                    </div>
                }
            </div>
            <div class="mb-3">
                <label for="description" class="form-label">Description</label>
                <InputText class="form-control" id="description" @bind-Value="EstateModel.Description"/>
                <ValidationMessage For="@(() => EstateModel.Description)"></ValidationMessage>
            </div>
            @* <div class="mb-3"> *@
            @*     <label for="image" class="form-label">Images</label> *@
            @*     <InputFile class="form-control" id="image" @bind-Value="CreateEstateModel.Image"/> *@
            @* </div> *@
            <div class="d-flex justify-content-center">
                <button type="submit" class="btn btn-primary" disabled="@_isSubmitting">Edit Estate</button>
            </div>
        </div>
    </div>
</EditForm>

@code {
    private readonly Dictionary<string, int> _quantities = new();

    [SupplyParameterFromForm] private CreateEstateModel? EstateModel { get; set; }

    [Parameter] public EstateViewModel? Estate { get; set; }

    private CustomValidation? _customValidation;

    private bool _isSubmitting;

    private string _priceString = "";
    
    private string[] _selectedRooms = Array.Empty<string>();
    
    private string[] _selectedUtilities = Array.Empty<string>();

    protected override void OnInitialized()
    {
        EstateModel = new CreateEstateModel
        {
            EstateCategory = Estate!.EstateCategory,
            EstateType = Estate.EstateType,
            Name = Estate.Name,
            Location = Estate.Location,
            Price = Estate.Price,
            TotalArea = Estate.TotalArea,
            EstateRooms = Estate.Rooms!,
            Utilities = Estate.Utilities!,
            Description = Estate.Description
        };
        foreach (var utility in EstateModel.Utilities!)
        {
            var newArray = new string[_selectedUtilities.Length + 1];
            _selectedUtilities.CopyTo(newArray, 0);
            newArray[^1] = utility;
            _selectedUtilities = newArray;   
        }
        foreach (var (key, value) in EstateModel.EstateRooms)
        {
            var newArray = new string[_selectedRooms.Length + 1];
            _selectedRooms.CopyTo(newArray, 0);
            newArray[^1] = key;
            _selectedRooms = newArray;
            _quantities.Add(key, value);
        }
        _priceString = EstateModel.Price.ToString()!;
    }

    private async void HandleValidSubmit()
    {
        _customValidation?.ClearErrors();
        try
        {
            _isSubmitting = true;
            EstateModel!.Utilities = _selectedUtilities.ToList();
            EstateModel!.EstateRooms = _quantities;
            EstateModel!.Price = decimal.Parse(_priceString);
            var result = await EstateService.UpdateById(Guid.Parse(Estate!.Id ?? string.Empty), EstateModel!);

            if (result != null)
            {
                if (result.IsSuccess)
                {
                    Logger.LogInformation(result.Message);
                    NavigationManager.NavigateTo("/listed-estates");
                }
                else
                {
                    Logger.LogError(result.Message);
                    // if (result.ValidationsErrors != null)
                    //     _customValidation?.DisplayErrors(result.ValidationsErrors);
                }
            }
        }
        catch (Exception)
        {
            Logger.LogError("An error occurred while registering a new estate");
        }
        finally
        {
            _isSubmitting = false;
        }
    }

    private void IncreaseQuantity(string option)
    {
        _quantities[option]++;
    }

    private void DecreaseQuantity(string option)
    {
        if (_quantities[option] > 0)
        {
            _quantities[option]--;
        }
    }

}