@inject IJSRuntime JsRuntime

<div class="m-2 ms-md-5 me-md-5">
    <div id="@CarouselName" class="carousel slide" data-bs-ride="carousel" data-bs-wrap="true" data-bs-interval="20000" data-bs-pause="false">
        <div class="carousel-indicators">
            <button type="button" data-bs-target="#carouselExampleIndicators" data-bs-slide-to="0" class="active" aria-current="true" aria-label="Slide 1"></button>
            <button type="button" data-bs-target="#carouselExampleIndicators" data-bs-slide-to="1" aria-label="Slide 2"></button>
            <button type="button" data-bs-target="#carouselExampleIndicators" data-bs-slide-to="2" aria-label="Slide 3"></button>
        </div>
        <div class="carousel-inner">
           @for (var i = 0; i < EstatePhotos!.Count; i++)
            {
                if (i == 0)
                {
                    <div class="carousel-item active">
                        <img src="@EstatePhotos[i]" class="d-block w-100 rounded" alt="Estate Image" height="400px">
                    </div>
                }
                else
                {
                    <div class="carousel-item">
                        <img src="@EstatePhotos[i]" class="d-block w-100 rounded" alt="Estate Image" height="400px">
                    </div>   
                }
            }
        </div>
        <button class="carousel-control-prev" type="button" data-bs-target="#carouselExampleIndicators" data-bs-slide="prev">
            <span class="carousel-control-prev-icon" aria-hidden="true"></span>
            <span class="visually-hidden">Previous</span>
        </button>
        <button class="carousel-control-next" type="button" data-bs-target="#carouselExampleIndicators" data-bs-slide="next">
            <span class="carousel-control-next-icon" aria-hidden="true"></span>
            <span class="visually-hidden">Next</span>
        </button>
    </div> 
</div>


@code {
    [Parameter]
    public List<string>? EstatePhotos { get; set; }
    
	const string CarouselName = "carouselExampleIndicators"; 

	protected override async Task OnAfterRenderAsync(bool firstRender)
	{
		object[] args = { CarouselName };
		await JsRuntime.InvokeVoidAsync("startCarousel", args); 
	}
}